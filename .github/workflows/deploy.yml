name: CI/CD to AKS

on:
  push:
    branches: [ "main" ]

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  ACR_LOGIN_SERVER: ${{ secrets.ACR_NAME }}.azurecr.io
  AKS_RG: ${{ secrets.AKS_RESOURCE_GROUP }}
  AKS_NAME: ${{ secrets.AKS_CLUSTER_NAME }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      # (azure/login docs) :contentReference[oaicite:7]{index=7}

      - name: Login to ACR (Docker)
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGIN_SERVER }}

      - name: Set up QEMU (for buildx)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build & push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ env.ACR_LOGIN_SERVER }}/backend:${{ github.sha }}

      - name: Build & push worker image
        uses: docker/build-push-action@v4
        with:
          context: ./ingestion-worker
          push: true
          tags: ${{ env.ACR_LOGIN_SERVER }}/worker:${{ github.sha }}

      - name: Set AKS context
        uses: azure/aks-set-context@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: ${{ env.AKS_NAME }}
          resource-group: ${{ env.AKS_RG }}
      # (aks set context doc) :contentReference[oaicite:8]{index=8}

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Deploy via Helm
        run: |
          helm upgrade --install backend-release charts/backend \
            --set image.repository=${{ env.ACR_LOGIN_SERVER }}/backend \
            --set image.tag=${{ github.sha }} \
            --wait --timeout 120s
      # (helm upgrade docs) :contentReference[oaicite:9]{index=9}

      - name: Run Helm test hooks
        run: |
          helm test backend-release --timeout 120s
